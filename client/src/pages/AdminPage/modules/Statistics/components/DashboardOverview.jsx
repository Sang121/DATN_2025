import React from "react";
import { Row, Col, Card, Statistic, Table, Progress, Typography, Spin, Alert } from "antd";
import { useQuery } from "@tanstack/react-query";
import { 
  getOverviewStats,
  getTopSellingProducts,
  getRevenueByPeriod,
  formatCurrency,
  formatNumber 
} from "../../../../../services/statisticsService";
import OverviewCards from "./OverviewCards";

const { Title } = Typography;

const DashboardOverview = ({ refreshKey }) => {
  // API c∆° b·∫£n - Hi·ªáu su·∫•t cao
  const { data: overview, isLoading: overviewLoading, error: overviewError } = useQuery({
    queryKey: ["overview-stats", refreshKey],
    queryFn: getOverviewStats,
    staleTime: 300000, // 5 ph√∫t
    refetchInterval: 300000,
    retry: 2,
    onError: (error) => {
      console.error("Overview Stats Error:", error);
    }
  });

  const { data: topProducts, isLoading: productsLoading, error: productsError } = useQuery({
    queryKey: ["top-products-dashboard", refreshKey],
    queryFn: () => getTopSellingProducts(5),
    staleTime: 300000,
    retry: 2,
    onError: (error) => {
      console.error("Top Products Error:", error);
    }
  });

  const { data: revenueData, isLoading: revenueLoading, error: revenueError } = useQuery({
    queryKey: ["revenue-dashboard", "7days", refreshKey],
    queryFn: () => getRevenueByPeriod("7days"),
    staleTime: 300000,
    retry: 2,
    onError: (error) => {
      console.error("Revenue Data Error:", error);
    }
  });

  // Loading state
  if (overviewLoading) {
    return (
      <div style={{ textAlign: "center", padding: "50px" }}>
        <Spin size="large" />
        <div style={{ marginTop: "16px" }}>ƒêang t·∫£i d·ªØ li·ªáu t·ªïng quan...</div>
      </div>
    );
  }

  // Error state
  if (overviewError) {
    return (
      <Alert
        message="Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ªïng quan"
        description={`L·ªói: ${overviewError.message}`}
        type="error"
        showIcon
        style={{ margin: "24px" }}
      />
    );
  }

  // No data state
  if (!overview?.data) {
    return (
      <Alert
        message="Kh√¥ng c√≥ d·ªØ li·ªáu"
        description="Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ ƒë·ªÉ hi·ªÉn th·ªã."
        type="info"
        showIcon
        style={{ margin: "24px" }}
      />
    );
  }

  // C·ªôt cho b·∫£ng s·∫£n ph·∫©m b√°n ch·∫°y
  const productColumns = [
    {
      title: "S·∫£n ph·∫©m",
      dataIndex: "name",
      key: "name",
      ellipsis: true,
      render: (text) => text || "N/A"
    },
    {
      title: "ƒê√£ b√°n",
      dataIndex: "sold",
      key: "sold",
      render: (value) => formatNumber(value || 0),
      align: "right",
    },
    {
      title: "Doanh thu",
      dataIndex: "revenue",
      key: "revenue",
      render: (value) => formatCurrency(value || 0),
      align: "right",
    },
    {
      title: "T·ª∑ l·ªá",
      key: "percentage",
      render: (_, record) => {
        const total = topProducts?.data?.reduce((sum, item) => sum + (item.sold || 0), 0) || 1;
        const percentage = ((record.sold || 0) / total) * 100;
        return (
          <Progress 
            percent={Math.round(percentage)} 
            size="small" 
            format={() => `${percentage.toFixed(1)}%`}
          />
        );
      },
    },
  ];

  return (
    <div className="fade-in">
      {/* Cards T·ªïng quan */}
      <OverviewCards data={overview.data} loading={overviewLoading} />

      <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
        {/* Doanh thu 7 ng√†y g·∫ßn ƒë√¢y */}
        <Col xs={24} lg={14}>
          <Card 
            title={<Title level={4}>üìà Doanh thu 7 ng√†y g·∫ßn ƒë√¢y</Title>}
            loading={revenueLoading}
            className="chart-container"
          >
            {revenueError ? (
              <Alert 
                message="Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu doanh thu" 
                type="warning" 
                showIcon 
              />
            ) : revenueData?.data && revenueData.data.length > 0 ? (
              <div>
                {revenueData.data.map((day, index) => (
                  <div 
                    key={index}
                    style={{ 
                      display: "flex", 
                      justifyContent: "space-between", 
                      alignItems: "center",
                      padding: "8px 0",
                      borderBottom: index < revenueData.data.length - 1 ? "1px solid #f0f0f0" : "none"
                    }}
                  >
                    <span style={{ fontWeight: 500 }}>
                      {day.date || "N/A"}
                    </span>
                    <span style={{ color: "#1890ff", fontWeight: "bold" }}>
                      {formatCurrency(day.revenue || 0)}
                    </span>
                  </div>
                ))}
                <div style={{ 
                  marginTop: "16px", 
                  padding: "12px", 
                  background: "#f6ffed", 
                  borderRadius: "6px",
                  textAlign: "center"
                }}>
                  <strong>T·ªïng 7 ng√†y: </strong>
                  <span style={{ color: "#52c41a", fontSize: "16px", fontWeight: "bold" }}>
                    {formatCurrency(
                      revenueData.data.reduce((sum, day) => sum + (day.revenue || 0), 0)
                    )}
                  </span>
                </div>
              </div>
            ) : (
              <div style={{ textAlign: "center", padding: "20px", color: "#999" }}>
                Ch∆∞a c√≥ d·ªØ li·ªáu doanh thu
              </div>
            )}
          </Card>
        </Col>

        {/* Top s·∫£n ph·∫©m b√°n ch·∫°y */}
        <Col xs={24} lg={10}>
          <Card 
            title={<Title level={4}>üèÜ Top 5 s·∫£n ph·∫©m b√°n ch·∫°y</Title>}
            loading={productsLoading}
            className="chart-container"
          >
            {productsError ? (
              <Alert 
                message="Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m" 
                type="warning" 
                showIcon 
              />
            ) : (
              <Table
                dataSource={topProducts?.data || []}
                columns={productColumns}
                pagination={false}
                size="small"
                className="statistics-table"
                rowKey={(record, index) => record._id || `product-${index}`}
                scroll={{ y: 300 }}
                locale={{
                  emptyText: "Ch∆∞a c√≥ d·ªØ li·ªáu s·∫£n ph·∫©m"
                }}
              />
            )}
          </Card>
        </Col>
      </Row>

      {/* Metrics nhanh */}
      <Row gutter={[16, 16]} style={{ marginTop: "24px" }}>
        <Col span={24}>
          <Card title={<Title level={4}>üìä Ch·ªâ s·ªë nhanh</Title>}>
            <Row gutter={16}>
              <Col xs={12} sm={6}>
                <Statistic
                  title="Conversion Rate"
                  value={overview.data.conversionRate || 0}
                  precision={2}
                  suffix="%"
                  valueStyle={{ color: "#722ed1" }}
                />
              </Col>
              <Col xs={12} sm={6}>
                <Statistic
                  title="T·ª∑ l·ªá ho√†n th√†nh"
                  value={((overview.data.completedOrders || 0) / (overview.data.totalOrders || 1)) * 100}
                  precision={1}
                  suffix="%"
                  valueStyle={{ color: "#52c41a" }}
                />
              </Col>
              <Col xs={12} sm={6}>
                <Statistic
                  title="ƒê∆°n h√†ng/Ng√†y"
                  value={Math.round((overview.data.totalOrders || 0) / 30)}
                  valueStyle={{ color: "#1890ff" }}
                />
              </Col>
              <Col xs={12} sm={6}>
                <Statistic
                  title="Doanh thu/ƒê∆°n"
                  value={formatCurrency(overview.data.avgOrderValue || 0)}
                  valueStyle={{ color: "#fa8c16" }}
                />
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default DashboardOverview;

const dotenv = require("dotenv");
dotenv.config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const Product = require("../models/productModel");
const User = require("../models/userModel");
const Order = require("../models/orderModel");
const mongoose = require("mongoose"); // Imported for potential aggregation helpers if needed, though not directly used for basic models
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);

// A simple in-memory store for conversation history.
// IMPORTANT: In a production application, this should be replaced with a persistent storage
// like a database (e.g., MongoDB, Redis) or a proper session management system,
// as in-memory storage will be lost when the server restarts or scales.
const conversationHistory = {}; // Key: userId, Value: Array of { role: 'user' | 'model', parts: [{ text: '...' }] }

/**
 * Handles chat interactions for regular users (customers).
 * Provides information about products based on available data.
 * Maintains conversation context.
 */
const UserChatbot = async (req, res) => {
  const { question, userId } = req.body; // userId is crucial for conversation history

  // Basic input validation
  if (!question) {
    return res.status(400).json({ error: "Question is required" });
  }
  if (!userId) {
    return res
      .status(400)
      .json({ error: "User ID is required for conversation history" });
  }

  // Initialize history for the user if it doesn't exist
  if (!conversationHistory[userId]) {
    conversationHistory[userId] = [];
  }

  try {
    // Fetch product data for the customer-facing chatbot
    const products = await Product.find({});
    const orderData = await Order.find({ user: userId });

    // Format product data more concisely
    const productData = products
      .filter((product) => product.totalStock > 0) // Only show in-stock products
      .slice(0, 20) // Limit to 20 products to keep prompt manageable
      .map((product) => {
        const availableVariants = product.variants.filter((v) => v.stock > 0);
        const sizeOptions = [
          ...new Set(availableVariants.map((v) => v.size)),
        ].join(", ");
        const colorOptions = [
          ...new Set(availableVariants.map((v) => v.color)),
        ].join(", ");

        return `‚Ä¢ ${product.name} - ${product.price.toLocaleString()}ƒë ${
          product.discount > 0 ? `(Gi·∫£m ${product.discount}%)` : ""
        }
   Danh m·ª•c: ${product.category} | Gi·ªõi t√≠nh: ${product.gender} | ƒê√£ b√°n: ${
     product.sold
   }
   Size: ${sizeOptions || "N/A"} | M√†u: ${colorOptions || "N/A"}`;
      })
      .join("\n");

    const orderDataString = orderData
      .slice(-3) // Only show last 3 orders
      .map(
        (order) =>
          `‚Ä¢ ƒê∆°n ${order._id
            .toString()
            .slice(-6)} - ${order.createdAt.toLocaleDateString(
            "vi-VN"
          )} - ${order.totalPrice.toLocaleString()}ƒë - ${order.orderStatus}`
      )
      .join("\n");

    // Initialize the chat session with the model, providing the conversation history
    const chat = genAI
      .getGenerativeModel({ model: "gemini-2.0-flash" })
      .startChat({
        history: conversationHistory[userId],
        generationConfig: {
          maxOutputTokens: 400, // Reduced for more concise responses
          temperature: 0.8, // Slightly higher for more creative suggestions
          topP: 0.9,
          topK: 40,
        },
      });

    // Define the prompt for the user chatbot
    const promptText = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω b√°n h√†ng chuy√™n nghi·ªáp v√† th√¢n thi·ªán c·ªßa c·ª≠a h√†ng S-Fashion.  
      Nhi·ªám v·ª• c·ªßa b·∫°n l√† t∆∞ v·∫•n s·∫£n ph·∫©m v√† gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc li√™n quan ƒë·∫øn s·∫£n ph·∫©m cho kh√°ch h√†ng.

      ƒê√¢y l√† danh s√°ch s·∫£n ph·∫©m hi·ªán c√≥ trong c·ª≠a h√†ng:
      ${productData}
      ƒê√¢y l√† th√¥ng tin ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng:
      ${orderDataString || "Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o."}

      üéØ VAI TR√í C·ª¶A B·∫†N:
      ‚Ä¢ T∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu v√† ng√¢n s√°ch kh√°ch h√†ng
      ‚Ä¢ G·ª£i √Ω ph·ªëi ƒë·ªì theo t·ª´ng d·ªãp: c√¥ng s·ªü, d·∫°o ph·ªë, h·∫πn h√≤, d·ª± ti·ªác
      ‚Ä¢ T∆∞ v·∫•n size, m√†u s·∫Øc d·ª±a tr√™n s·ªü th√≠ch c√° nh√¢n
      ‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ch·∫•t li·ªáu, c√°ch b·∫£o qu·∫£n s·∫£n ph·∫©m
      ‚Ä¢ H·ªó tr·ª£ ƒë·∫∑t h√†ng v√† theo d√µi ƒë∆°n h√†ng hi·ªán c√≥

      üí° C√ÅCH T∆Ø V·∫§N:
      ‚Ä¢ H·ªèi r√µ d·ªãp s·ª≠ d·ª•ng, s·ªü th√≠ch m√†u s·∫Øc, ng√¢n s√°ch
      ‚Ä¢ ƒê·ªÅ xu·∫•t 2-3 s·∫£n ph·∫©m ph√π h·ª£p v·ªõi gi·∫£i th√≠ch l√Ω do
      ‚Ä¢ G·ª£i √Ω c√°ch ph·ªëi ƒë·ªì t·∫°o nhi·ªÅu outfit kh√°c nhau
      ‚Ä¢ Th√¥ng b√°o t√¨nh tr·∫°ng c√≤n h√†ng v√† khuy·∫øn m√£i (n·∫øu c√≥)

      üö´ GI·ªöI H·∫†N:
      ‚Ä¢ Kh√¥ng t∆∞ v·∫•n v·ªÅ thanh to√°n, v·∫≠n chuy·ªÉn, ƒë·ªïi tr·∫£ (chuy·ªÉn sang CSKH)
      ‚Ä¢ Kh√¥ng th·∫£o lu·∫≠n ch·ªß ƒë·ªÅ ngo√†i th·ªùi trang
      ‚Ä¢ Ch·ªâ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c√≥ trong danh s√°ch

      H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† h·ªØu √≠ch. S·ª≠ d·ª•ng emoji ƒë·ªÉ t·∫°o s·ª± sinh ƒë·ªông.

      C√¢u h·ªèi: ${question}
    `;

    // Send the prompt to the generative model
    const result = await chat.sendMessage(promptText);
    let answer = result.response.text();

    // Add helpful suggestions if the response is too short
    if (answer.length < 100 && !question.toLowerCase().includes("c·∫£m ∆°n")) {
      answer +=
        "\n\nüí≠ B·∫°n c√≥ mu·ªën t√¥i g·ª£i √Ω th√™m s·∫£n ph·∫©m ph√π h·ª£p ho·∫∑c c√°ch ph·ªëi ƒë·ªì kh√¥ng?";
    }

    // Store the current turn (user question and AI answer) in history for future context
    conversationHistory[userId].push({
      role: "user",
      parts: [{ text: question }],
    });
    conversationHistory[userId].push({
      role: "model",
      parts: [{ text: answer }],
    });

    // Limit conversation history to prevent memory issues
    if (conversationHistory[userId].length > 20) {
      conversationHistory[userId] = conversationHistory[userId].slice(-20);
    }

    res.status(200).json({ answer });
  } catch (error) {
    console.error("Error occurred while processing user chat:", error);
    res
      .status(500)
      .json({ error: "Internal Server Error", details: error.message });
  }
};

/**
 * Handles chat interactions for admin users.
 * Provides analytical data, statistics, and reports about the store.
 * Focuses on performance by aggregating data efficiently.
 */
const AdminChatbot = async (req, res) => {
  const { question, userId } = req.body;

  if (!question) {
    return res.status(400).json({ error: "Question is required" });
  }
  if (!userId) {
    return res
      .status(400)
      .json({ error: "User ID is required for conversation history" });
  }

  // Initialize history for the admin if it doesn't exist
  if (!conversationHistory[userId]) {
    conversationHistory[userId] = [];
  }

  try {
    const now = new Date();
    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    const endOfMonth = new Date(
      now.getFullYear(),
      now.getMonth() + 1,
      0,
      23,
      59,
      59
    );

    const totalProducts = await Product.countDocuments();
    const topSellingProducts = await Product.find()
      .sort({ sold: -1 })
      .limit(5)
      .select("name sold");
    const nearOutOfStockProducts = await Product.find({ stock: { $lt: 5 } })
      .sort({ sold: -1 })
      .select("name sold");

    const totalOrders = await Order.countDocuments();
    const pendingOrders = await Order.countDocuments({
      orderStatus: "pending",
    });
    const completedOrders = await Order.countDocuments({
      orderStatus: "delivered",
    });
    const processingOrders = await Order.countDocuments({
      orderStatus: "processing",
    });

    const totalRevenueResult = await Order.aggregate([
      { $match: { orderStatus: "delivered" } },
      { $group: { _id: null, total: { $sum: "$totalPrice" } } },
    ]);
    const totalRevenue =
      totalRevenueResult.length > 0 ? totalRevenueResult[0].total : 0;

    const monthlyRevenueResult = await Order.aggregate([
      {
        $match: {
          orderStatus: "delivered",
          createdAt: { $gte: startOfMonth, $lte: endOfMonth },
        },
      },
      { $group: { _id: null, total: { $sum: "$totalPrice" } } },
    ]);
    const monthlyRevenue =
      monthlyRevenueResult.length > 0 ? monthlyRevenueResult[0].total : 0;

    // Aggregate User Data
    const totalUsers = await User.countDocuments();
    const totalAdmins = await User.countDocuments({ isAdmin: true });

    // Store aggregated data in an object
    const aggregatedData = {
      totalProducts,
      nearOutOfStockProducts,
      topSellingProducts:
        topSellingProducts
          .map((p) => `${p.name} (${p.sold} ƒë√£ b√°n)`)
          .join(", ") || "Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c b√°n",
      totalOrders,
      pendingOrders,
      completedOrders,
      totalRevenue: totalRevenue.toLocaleString("vi-VN") + " VND",
      monthlyRevenue: monthlyRevenue.toLocaleString("vi-VN") + " VND",
      currentMonth: now.getMonth() + 1,
      currentYear: now.getFullYear(),
      totalUsers,
      totalAdmins,
    };

    // Format aggregated data into a string for the prompt
    const aggregatedDataString = `
    --- D·ªØ li·ªáu T·ªïng Quan C·ª≠a H√†ng (C·∫≠p nh·∫≠t t·ªõi ${new Date().toLocaleDateString(
      "vi-VN"
    )}) ---
    - T·ªïng s·ªë s·∫£n ph·∫©m: ${aggregatedData.totalProducts}
    - 5 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t: ${aggregatedData.topSellingProducts}
    - S·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng( d∆∞·ªõi 5 s·∫£n ph·∫©m t·ªìn kho): ${
      aggregatedData.nearOutOfStockProducts
        .map((p) => `${p.name} (${p.sold} ƒë√£ b√°n)`)
        .join(", ") || "Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o s·∫Øp h·∫øt h√†ng"
    }
    - T·ªïng s·ªë ƒë∆°n h√†ng: ${aggregatedData.totalOrders}
    - ƒê∆°n h√†ng ƒëang ch·ªù x·ª≠ l√Ω: ${aggregatedData.pendingOrders}
    - ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao: ${aggregatedData.processingOrders}
    - ƒê∆°n h√†ng ƒë√£ giao: ${aggregatedData.completedOrders}
    - T·ªïng doanh thu (t·∫•t c·∫£ th·ªùi gian, ƒë∆°n ƒë√£ giao): ${
      aggregatedData.totalRevenue
    }
    - Doanh thu th√°ng ${aggregatedData.currentMonth}/${
      aggregatedData.currentYear
    } (ƒë∆°n ƒë√£ giao): ${aggregatedData.monthlyRevenue}
    - T·ªïng s·ªë ng∆∞·ªùi d√πng: ${aggregatedData.totalUsers}
    - S·ªë l∆∞·ª£ng qu·∫£n tr·ªã vi√™n: ${aggregatedData.totalAdmins}
    --- H·∫øt D·ªØ li·ªáu T·ªïng Quan ---
    `;

    // Initialize the chat session for Admin, providing the conversation history
    const chat = genAI
      .getGenerativeModel({ model: "gemini-2.0-flash" })
      .startChat({
        history: conversationHistory[userId],
        generationConfig: {
          maxOutputTokens: 1000, // Allow longer responses for detailed reports
          temperature: 0.7, // Maintain natural conversation
        },
      });

    // Define the prompt for the Admin chatbot
    const promptText = `
      B·∫°n l√† m·ªôt tr·ª£ l√Ω qu·∫£n l√Ω (Admin Chatbot) chuy√™n nghi·ªáp v√† th√¥ng minh cho c·ª≠a h√†ng S-Fashion.
      Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ qu·∫£n tr·ªã vi√™n (Admin) b·∫±ng c√°ch ph√¢n t√≠ch, th·ªëng k√™, v√† cung c·∫•p c√°c b√°o c√°o b√°n h√†ng d·ª±a tr√™n d·ªØ li·ªáu c·ª≠a h√†ng.

      ${aggregatedDataString}

      B·∫°n c√≥ th·ªÉ cung c·∫•p c√°c th√¥ng tin sau:
      - C√°c s·ªë li·ªáu t·ªïng quan v·ªÅ c·ª≠a h√†ng (doanh thu, s·ªë ƒë∆°n, s·∫£n ph·∫©m b√°n ch·∫°y, t·ªìn kho...).
      - B√°o c√°o doanh s·ªë theo th√°ng/nƒÉm.
      - Th·ªëng k√™ v·ªÅ ƒë∆°n h√†ng (t·ªïng, ch·ªù x·ª≠ l√Ω, ƒë√£ ho√†n th√†nh).
      - Th·ªëng k√™ ng∆∞·ªùi d√πng.
      - ƒê·ªÅ xu·∫•t c√°c h√†nh ƒë·ªông d·ª±a tr√™n d·ªØ li·ªáu (v√≠ d·ª•: nh·∫≠p h√†ng, gi·∫£m gi√° s·∫£n ph·∫©m s·∫Øp h·∫øt h√†ng).
      - ƒê·ªÅ xu·∫•t c√°c chi·∫øn l∆∞·ª£c kinh doanh d·ª±a tr√™n xu h∆∞·ªõng b√°n h√†ng.
      Khi Admin h·ªèi v·ªÅ th√¥ng tin, h√£y s·ª≠ d·ª•ng d·ªØ li·ªáu t·ªïng quan ƒë√£ cung c·∫•p ·ªü tr√™n ƒë·ªÉ tr·∫£ l·ªùi.

      Khi Admin h·ªèi v·ªÅ th√¥ng tin m√† b·∫°n c√≥ th·ªÉ cung c·∫•p t·ª´ d·ªØ li·ªáu t·ªïng quan tr√™n, h√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp, r√µ r√†ng v√† s·ª≠ d·ª•ng c√°c s·ªë li·ªáu ƒë√£ cung c·∫•p.
      N·∫øu Admin h·ªèi v·ªÅ th√¥ng tin chi ti·∫øt h∆°n (v√≠ d·ª•: doanh s·ªë c·ªßa m·ªôt th√°ng c·ª• th·ªÉ kh√¥ng ph·∫£i th√°ng hi·ªán t·∫°i, danh s√°ch chi ti·∫øt t·∫•t c·∫£ c√°c ƒë∆°n h√†ng Pending, th√¥ng tin c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ, ho·∫∑c th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt kh√¥ng c√≥ trong top b√°n ch·∫°y) m√† d·ªØ li·ªáu t·ªïng h·ª£p hi·ªán t·∫°i ch∆∞a c√≥, h√£y y√™u c·∫ßu Admin cung c·∫•p th√™m chi ti·∫øt (v√≠ d·ª•: "B·∫°n mu·ªën xem doanh s·ªë th√°ng n√†o?", "M√£ ƒë∆°n h√†ng b·∫°n mu·ªën tra c·ª©u l√† g√¨?") ho·∫∑c th√¥ng b√°o r·∫±ng b·∫°n ch·ªâ c√≥ th·ªÉ cung c·∫•p d·ªØ li·ªáu t·ªïng quan ƒë·ªÉ t·ªëi ∆∞u hi·ªáu su·∫•t v√† tr√°nh t·∫£i qu√° nhi·ªÅu d·ªØ li·ªáu.

      ƒê·∫£m b·∫£o c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n lu√¥n ·ªü trong ng·ªØ c·∫£nh c·ªßa cu·ªôc tr√≤ chuy·ªán v√† c·ª±c k·ª≥ h·ªØu √≠ch cho Admin. ƒê·ª£i Admin h·ªèi r·ªìi m·ªõi tr·∫£ l·ªùi, kh√¥ng t·ª± ƒë·ªông cung c·∫•p th√¥ng tin n·∫øu kh√¥ng c√≥ c√¢u h·ªèi c·ª• th·ªÉ.
      N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn qu·∫£n l√Ω c·ª≠a h√†ng ho·∫∑c d·ªØ li·ªáu kinh doanh, h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† khuy√™n Admin t·∫≠p trung v√†o c√°c v·∫•n ƒë·ªÅ qu·∫£n l√Ω.

      C√¢u h·ªèi c·ªßa Admin: ${question}
    `;

    // Send the prompt to the generative model
    const result = await chat.sendMessage(promptText);
    const answer = result.response.text();

    // Store the current turn (user question and AI answer) in history for future context
    conversationHistory[userId].push({
      role: "user",
      parts: [{ text: question }],
    });
    conversationHistory[userId].push({
      role: "model",
      parts: [{ text: answer }],
    });

    res.status(200).json({ answer });
  } catch (error) {
    console.error("Error occurred while processing admin chat:", error);
    res
      .status(500)
      .json({ error: "Internal Server Error", details: error.message });
  }
};

module.exports = {
  UserChatbot,
  AdminChatbot,
};
